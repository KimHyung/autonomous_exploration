<launch>
<!-- For zedm -->
<!-- <arg name="input_image"         default="/zedm/zed_node/left/image_rect_color"/> -->
<!-- <arg name="input_depth"         default="/zedm/zed_node/depth/depth_registered"/> -->
<!-- <arg name="point_cloud_topic"   default="/zedm/zed_node/point_cloud/cloud_registered"/> -->
<!-- <arg name="point_cloud_topic"   default="/zedm/zed_node/point_cloud/cloud_registered"/> -->

<!-- For RGBD -->
<arg name="input_image"         default="/camera/rgb/image_raw"/>
<arg name="input_depth"         default="/camera/depth/image_raw"/>
<arg name="input_camera_info"   default="/camera/rgb/camera_info"/>
<arg name="point_cloud_topic"   default="/camera/depth/points"/>

<arg name="darknet_config"      default="$(find darknet_ros)/config/darknet_config.yaml"/>

<!-- 1. SOR Filtering -->
<node pkg="sor_filter" type="sor_filter" name="sor_filter" output="screen"/>

<!-- 2. Yolo -->
<!-- 2-1. setup Nodelet -->
<arg name="MANAGER" value="detection_manager"/>
<node pkg="nodelet" type="nodelet" args="manager" name="$(arg MANAGER)" output="screen"/>
<!-- 2-2. Detection -->
<param name="/darknet_ros/subscribers/camera_reading/topic"      value="$(arg input_image)"/>
<param name="/darknet_ros/subscribers/camera_reading/queue_size" value="1"/>
<include file="$(find darknet_ros)/launch/darknet_ros.launch">
    <arg name="ros_config" value="$(arg darknet_config)"/>
</include>
<!-- 2-3. Point Cloud -->
<!-- if use depth camera use this -->
<node pkg="nodelet" type="nodelet" name="point_cloud_generator" args="load depth_image_proc/point_cloud_xyzrgb $(arg MANAGER)">
    <remap from="rgb/camera_info" to="$(arg input_camera_info)"/>
    <remap from="rgb/image_rect_color" to="$(arg input_image)"/>
    <remap from="depth_registered/image_rect" to="$(arg input_depth)"/>
    <remap from="depth_registered/points" to="/filtered"/>
</node>
<!-- 2-4. Coordinates -->
<node pkg="nodelet" type="nodelet" name="label_mask"
  	args="load jsk_pcl_utils/LabelToClusterPointIndices $(arg MANAGER)">
    <remap from="~input" to="darknet_ros/label_image"/>
    <remap from="~output" to="darknet_ros/cluster_points"/>
</node>
<node pkg="nodelet" type="nodelet" name="cluster_decomposer"
  	args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg MANAGER)">
    <remap from="~input" to="/filtered"/>
    <remap from="~target" to="darknet_ros/cluster_points"/>
    <rosparam>
      approximate_sync: true

      <!-- TARGET FRAME -->
      align_boxes: true
      align_boxes_with_plane: false
      target_frame_id: map

      <!-- PUBLISH TF -->
      publish_tf: true
      tf_prefix: yolo_
    </rosparam>
</node>

<!-- 3. Publish bounding box point cloud -->
<node pkg="sor_filter" name="bbpublisher" type="bbpublisher.py" output="screen"/>  
<node pkg="sor_filter" name="box_pc" type="box_pc" output="screen"/>  
</launch>

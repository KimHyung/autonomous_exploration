<launch>
  <!-- Arguments -->
  <arg name="open_rviz" default="true"/>
  <arg name="YOLO" default="false"/>

  <!-- TurtleBot3 -->
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="waffle" />
  </include>

  <!-- SLAM: Gmapping, Cartographer, Hector, Karto, Frontier_exploration, RTAB-Map -->
  <node pkg="gmapping" type="slam_gmapping" name="gmapping" output="screen">
    <param name="base_frame" value="base_footprint"/>
    <param name="odom_frame" value="odom"/>
    <param name="map_frame"  value="map"/>
    <rosparam command="load" file="$(find autonomous_exploration)/config/gmapping_params.yaml" />
  </node>

  <!-- Navigation -->
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>

  <!-- move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <rosparam file="$(find autonomous_exploration)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find autonomous_exploration)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find autonomous_exploration)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find autonomous_exploration)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find autonomous_exploration)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find autonomous_exploration)/param/dwa_local_planner_params.yaml" command="load" />
    <!-- <remap from="cmd_vel" to="/cmd_vel"/>
    <remap from="odom" to="odom"/> -->
    <param name="DWAPlannerROS/min_vel_x" value="0.0"/>
    <rosparam file="$(find autonomous_exploration)/param/global_costmap_params.yaml" command="load" if="$(arg YOLO)" />
  </node>

  <!-- obstacle detector -->
  <node name="obstacle_extractor" pkg="obstacle_detector" type="obstacle_extractor_node">
    <param name="active"               value="true"/>
    <param name="use_scan"             value="true"/>
    <param name="use_pcl"              value="false"/>
    <param name="use_split_and_merge"    value="true"/>
    <param name="circles_from_visibles"  value="true"/>
    <param name="discard_converted_segments" value="true"/>
    <param name="transform_coordinates"  value="true"/>
    <!-- minimum number of points comprising a group to be further processed -->
    <param name="min_group_points"     value="2"/>
    <!--if the distance between two points is greater than this value, start a new group-->
    <param name="max_group_distance"   value="0.1"/>
    <param name="distance_proportion"  value="0.00628"/>
    <param name="max_split_distance"   value="0.2"/>
    <param name="max_merge_separation" value="0.2"/>
    <param name="max_merge_spread"     value="0.2"/>
    <param name="max_circle_radius"    value="0.6"/>
    <param name="radius_enlargement"   value="0.3"/>
    <param name="frame_id"             value="map"/>
  </node>
  <node name="obstacle_tracker" pkg="obstacle_detector" type="obstacle_tracker_node">
    <param name="active"                  value="false"/>
    <param name="loop_rate"               value="100.0"/>
    <param name="tracking_duration"       value="2.0"/>
    <param name="min_correspondence_cost" value="0.6"/>
    <param name="std_correspondence_dev"  value="0.15"/>
    <param name="process_variance"        value="0.1"/>  
    <param name="process_rate_variance"   value="0.1"/>  
    <param name="measurement_variance"    value="1.0"/> 
    <param name="frame_id"                value="map"/>
    <remap from="tracked_obstacles" to="obstacles"/>
  </node>

  <!-- rviz -->
  <group if="$(arg open_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find autonomous_exploration)/config/autonomous_exploration.rviz"/>
  </group>
</launch>
